import uuid
from typing import Optional
from fastapi import HTTPException, UploadFile
from google.cloud import storage
import os
from datetime import datetime, timezone

# Initialize Firebase Storage client
def get_storage_client():
    """Initialize and return Google Cloud Storage client"""
    return storage.Client()

async def upload_id_photo(
    file: UploadFile, 
    user_id: str, 
    device_id: str
) -> str:
    """
    Upload ID photo to Firebase Storage and return the public URL
    
    Args:
        file: The uploaded file
        user_id: User's UID for organizing files
        device_id: Device ID for file naming
        
    Returns:
        str: Public URL of the uploaded file
    """
    
    # Validate file type
    allowed_types = ["image/jpeg", "image/jpg", "image/png", "image/webp"]
    if file.content_type not in allowed_types:
        raise HTTPException(
            status_code=400,
            detail=f"Invalid file type. Allowed types: {', '.join(allowed_types)}"
        )
    
    # Validate file size (5MB limit)
    max_size = 5 * 1024 * 1024  # 5MB in bytes
    file_content = await file.read()
    if len(file_content) > max_size:
        raise HTTPException(
            status_code=400,
            detail="File size exceeds 5MB limit"
        )
    
    try:
        # Initialize storage client
        client = get_storage_client()
        
        # Get bucket (replace with your Firebase Storage bucket name)
        # You'll need to set this as an environment variable or config
        bucket_name = os.getenv("FIREBASE_STORAGE_BUCKET", "minordetails-1aff3.appspot.com")
        bucket = client.bucket(bucket_name)
        
        # Generate unique filename using the new base path
        timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
        file_extension = file.filename.split('.')[-1] if '.' in file.filename else 'jpg'
        base_path = "employee_device_registration_identification" # <-- New base path
        filename = f"{base_path}/{user_id}/{device_id}_{timestamp}.{file_extension}"
        
        # Create blob and upload
        blob = bucket.blob(filename)
        blob.upload_from_string(file_content, content_type=file.content_type)
        
        # The blob is no longer made public here.
        # Access is controlled by Firebase Storage Security Rules.
        # Owners will access via Firebase SDK or Signed URLs generated by the backend.
        
        # Return the GCS URI or a path that can be used to generate a signed URL later.
        # For now, we return the public_url, but its accessibility is rule-dependent.
        return blob.public_url
        
    except Exception as e:
        print(f"Error uploading file: {e}")
        raise HTTPException(
            status_code=500,
            detail="Failed to upload ID photo"
        )

def validate_device_id_format(device_id: str) -> bool:
    """
    Validate that device_id follows the format: phone_number + device_type
    Example: 4435713151iphone, 5551234567android
    
    Args:
        device_id: The device ID to validate
        
    Returns:
        bool: True if format is valid, False otherwise
    """
    if not device_id or len(device_id) < 11:  # Minimum: 10-digit phone + 1 char device type
        return False
    
    # Check if it ends with known device types
    valid_device_types = ['iphone', 'android', 'ios', 'web']
    
    for device_type in valid_device_types:
        if device_id.lower().endswith(device_type):
            # Extract phone number part
            phone_part = device_id[:-len(device_type)]
            # Check if phone part is all digits and reasonable length (10-15 digits)
            if phone_part.isdigit() and 10 <= len(phone_part) <= 15:
                return True
    
    return False

def extract_phone_from_device_id(device_id: str) -> Optional[str]:
    """
    Extract phone number from device_id
    
    Args:
        device_id: The device ID in format phone_number + device_type
        
    Returns:
        str: Phone number if valid format, None otherwise
    """
    if not validate_device_id_format(device_id):
        return None
    
    valid_device_types = ['iphone', 'android', 'ios', 'web']
    
    for device_type in valid_device_types:
        if device_id.lower().endswith(device_type):
            return device_id[:-len(device_type)]
    
    return None 